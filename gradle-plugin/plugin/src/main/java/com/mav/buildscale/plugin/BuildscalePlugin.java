/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.mav.buildscale.plugin;

import com.mav.buildscale.plugin.internal.BuildInfoService;
import com.mav.buildscale.plugin.internal.BuildPublishService;
import com.mav.buildscale.plugin.internal.BuildReportService;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.invocation.Gradle;
import org.gradle.api.provider.Provider;
import org.gradle.build.event.BuildEventsListenerRegistry;

import javax.inject.Inject;

public class BuildscalePlugin implements Plugin<Project> {

    private final BuildEventsListenerRegistry registry;

    @Inject
    public BuildscalePlugin(final BuildEventsListenerRegistry registry) {
        this.registry = registry;
    }

    @Override
    public void apply(final Project project) {
        final BuildscaleExtension extension = project.getExtensions().create("buildscale", BuildscaleExtension.class, project.getObjects());

        final Provider<BuildInfoService> buildInfoServiceProvider = registerBuildInfoService(project.getGradle(), project.getName());
        final Provider<BuildReportService> buildReportServiceProvider = registerBuildReportService(project.getGradle());
        registerBuildPublisherService(project.getGradle(), extension, buildInfoServiceProvider, buildReportServiceProvider);
    }

    private Provider<BuildInfoService> registerBuildInfoService(final Gradle gradle, final String projectName) {
        final Provider<BuildInfoService> buildInfoServiceProvider = gradle.getSharedServices().registerIfAbsent("build-info-service", BuildInfoService.class, service -> {
            service.getParameters().getProjectName().set(projectName);
            service.getParameters().getGradleVersion().set(gradle.getGradleVersion());
        });
        return buildInfoServiceProvider;
    }

    private Provider<BuildReportService> registerBuildReportService(final Gradle gradle) {
        final Provider<BuildReportService> buildReportServiceProvider = gradle.getSharedServices().registerIfAbsent("build-report-service", BuildReportService.class, service -> {
        });
        registry.onTaskCompletion(buildReportServiceProvider);
        return buildReportServiceProvider;
    }

    private void registerBuildPublisherService(final Gradle gradle, final BuildscaleExtension extension, final Provider<BuildInfoService> buildInfoServiceProvider, final Provider<BuildReportService> buildReportServiceProvider) {
        final Provider<BuildPublishService> buildPublishService = gradle.getSharedServices().registerIfAbsent("build-publish-service", BuildPublishService.class, service -> {
            service.getParameters().getPublishEnabled().set(extension.getPublishEnabled());
            service.getParameters().getUrl().set(extension.getUri());
            service.getParameters().getVerboseEnabled().set(extension.getVerboseEnabled());
            service.getParameters().getBuildInfoServiceProvider().set(buildInfoServiceProvider);
            service.getParameters().getBuildReportServiceProvider().set(buildReportServiceProvider);
        });
        registry.onTaskCompletion(buildPublishService);
    }

}
